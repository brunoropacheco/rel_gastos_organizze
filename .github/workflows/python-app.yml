# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "3 */12 * * *" # Roda a cada 12 horas

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Run the script
      env:
        TOKEN_ORGANIZZE: ${{ secrets.TOKEN_ORGANIZZE }}
        API_MAILTRAP: ${{ secrets.API_MAILTRAP }}
        DB_HOST: ${{ env.DB_HOST }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ env.DB_NAME }}
        PASSWORD_GMAIL: ${{ secrets.PASSWORD_GMAIL }}
        EMAIL_GMAIL: ${{ env.EMAIL_GMAIL }}
      run: |
        python src/analise_api_organizze.py
